#!/bin/tcsh -f

# check that required args are present
if ($#argv != 2) then
    echo "usage: <derived data file> <input file>"
    exit 1
endif

# date and time variables, upon which $outputDir is based
# --these will be modified when this script is time-stamped and copied
# to $outputDir
set date = `date '+%Y.%m.%d'`
set time = `date '+%H.%M'`

set dir = `dirname $0`
set scriptDir = `cd $dir  ; echo $cwd`
set parent = `cd $scriptDir/.. ; echo $cwd`

# prepend parent of this script's directory to a shell variable version
# of CLASSPATH, so we use classes of this particular sandbox
set classpath = $parent\:$CLASSPATH

# the two required arguments
# --these will be modified when this script is time-stamped and copied
# to $outputDir
set derivedDataFile = $1
set inFile = $2

# guess that gold file is simply $inFile.gold
set goldFile = $inFile.gold

# the all-important output directory for this experiment
set outputDir = $parent/experiments/$date/$time

# scripts used by this script
set startClientScript = $scriptDir/start-client
set printNodesScript = $scriptDir/print-nodes
set rmiregistryScript = $scriptDir/start-rmiregistry

# bookkeeping output files (pid files, node file script file)
set pidFile = $outputDir/pids
set rmiregistryPidFile = $outputDir/rmiregistry-pid
set nodeFile = $outputDir/nodes
set scriptFile = $outputDir/$0:t

# make all switchboard output files be in output directory
set sbMsgFile = $outputDir/switchboard.messages
set outFile = $outputDir/$inFile:t.parsed
set logFile = $outputDir/$inFile:t.log

# scoring variables
set scorerDir = $parent/scorer
set scorer = $scorerDir/evalb
set scorerParam = $scorerDir/COLLINS.prm

# set up shell variables sb and cl for switchboard and clients, respectively
# (startClientScript also does this, so we're only doing it here to get
# the proper setting of the sb variable)
source $parent/policy.tcsh

set nodes = `$printNodesScript`

if ($#nodes == 0) then
    echo "No nodes found when running $printNodesScript\!"
    exit 1
endif

# set switchboard host to be the first in the list of nodes
set sbHost = $nodes[1]

# set client nodes to be all nodes except the one on which the switchboard
# is running
set clientHosts = ($nodes[2-$#nodes])

# make experiment output directory, if possible
echo "Making directory"
echo "	$outputDir"
mkdir -p $outputDir
if ($status != 0) then
    echo "Couldn't create output directory.  Exiting."
    exit -1
endif

# start rmiregistry on switchboard host
$rmiregistryScript $sbHost $rmiregistryPidFile

echo "Creating pid file"
echo "	$pidFile"

/bin/rm -f $pidFile

# start clients
set sbNameRMI = "//$sbHost/Switchboard"
foreach host ($clientHosts)
    echo Starting client on $host
    echo "" | rsh $host $startClientScript $classpath $host $outputDir \
                            -is $derivedDataFile $sbNameRMI &
    echo -n "$! " >> $pidFile
end

echo "Putting nodes used in this experiment into"
echo "	$nodeFile"
echo $nodes > $nodeFile

# if this is *not* a time-stampted script, copy it into log directory
set timeStamp = "# time-stamped script"
if (`tail -1 $0` != "$timeStamp") then
    echo ""
    echo "Creating time-stamped version of this shell script:"
    echo "	$scriptFile"
    # we need to put a backslash before every forward slash, since
    # the shell will process the sed expression before sed processes it
    set sedInFile = `echo $inFile | sed -e 's/\//\\\//g'`
    set sedDDF = `echo $derivedDataFile | sed -e 's/\//\\\//g'`
    set sedScriptDir = `echo $scriptDir | sed -e 's/\//\\\//g'`
    sed -e "s/^\(set date = \).*/\1$date/" -e "s/^\(set time = \).*/\1$time/" \
	-e "s/^\(set inFile = \).*/\1($sedInFile)/" \
        -e "s/^\(set derivedDataFile = \).*/\1$sedDDF/" \
	-e "s/^\(set scriptDir = \).*/\1$sedScriptDir/" $0 > $scriptFile
    echo $timeStamp >> $scriptFile
    chmod +x $scriptFile
endif

# start switchboard
echo Starting switchboard on $sbHost
echo "" | rsh $sbHost java -cp $classpath -Xms100m -Xmx100m $sb \
		danbikel.parser.StartSwitchboard \
		-msg $sbMsgFile $inFile -o $outFile -log $logFile

# finally, if gold file exists, try to score
if (-f $goldFile) then
    echo ""
    echo "Adding fake parts of speech to $outFile"
    java -cp $classpath danbikel.parser.util.AddFakePos \
	$goldFile $outFile > $outFile.scorable
    # make sure scorer has been compiled
    (cd $scorerDir ; make)
    $scorer -p $scorerParam $goldFile $outFile.fixed > $outFile.score
endif

# kill off rmi registry proc
echo "Killing rmiregistry"
kill `cat $rmiregistryPidFile`

echo "Killing clients, if any are still alive"
kill `cat $pidFile`
